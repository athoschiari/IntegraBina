unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, IdBaseComponent, IdComponent, IdUDPBase,
  IdUDPServer, Vcl.StdCtrls, IdGlobal, IdSocketHandle,StrUtils,ShellAPI,
  Vcl.OleCtrls, myBraiDPortX_TLB, Vcl.Buttons, IdTCPConnection, IdTCPClient,
  IdCustomTCPServer, IdTCPServer, IdContext, IdUDPClient;

type
  TForm1 = class(TForm)
    IdUDPServer1: TIdUDPServer;
    Memo1: TMemo;
    Edit2: TEdit;
    Edit3: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Edit1: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Button1: TButton;
    Edit4: TEdit;
    BitBtn1: TBitBtn;
    Memo2: TMemo;
    Edit6: TEdit;
    Label6: TLabel;
    Label7: TLabel;
    Edit7: TEdit;
    IdTCPServer1: TIdTCPServer;
    ComboBox1: TComboBox;
    IdUDPClient1: TIdUDPClient;
    procedure IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
      const AData: TIdBytes; ABinding: TIdSocketHandle);
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure IdTCPClient1Work(ASender: TObject; AWorkMode: TWorkMode;
      AWorkCount: Int64);
    procedure IdTCPServer1Execute(AContext: TIdContext);
  private

  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.BitBtn1Click(Sender: TObject);
VAR
 texto : string;
 i:integer;
begin

    IdUDPClient1.Disconnect;
    IdUDPClient1.ReceiveTimeout := 1000;
    IdUDPClient1.Host := ComboBox1.text;
    IdUDPClient1.Port := StrToIntDef(Edit6.Text,2020);

    for i := 0 to Memo2.Lines.Count-1 do
       Texto := Texto + Memo2.Lines.Strings[i];


      try
        if not IdUDPClient1.Connected then
          IdUDPClient1.Connect;
          IdUDPClient1.Send(Edit7.Text+'<:>'+texto,IndyTextEncoding_UTF8 );
      except
      on E:Exception do
          if ( E.Message <> 'Connection Closed Gracefully.') then begin
            Memo1.Lines.Insert(0, 'ERROR: ' + E.Message);
          end;
      end;

 end;

procedure TForm1.Button1Click(Sender: TObject);
begin
memo1.Clear;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
 sHnd:HWND;
 S,Registro:String;
 I:INTEGER;

begin



//myBraiUDPort1.AddClear;
//myBraiUDPort1.AddIP("");
//myBraiUDPort1.AddPort(0);
// myBraiUDPort1.Active := True;

 //----------------- Ler até 6 linhas --------------//
 // Placa de som 1
 IdUDPServer1.Bindings.add.port := 6511; // Linha 1
 IdUDPServer1.Bindings.add.port := 6512; // Linha 2

 //Placa de som 2
 IdUDPServer1.Bindings.add.port := 6513; // Linha 3
 IdUDPServer1.Bindings.add.port := 6514; // Linha 4

 //Placa de som 3
 IdUDPServer1.Bindings.add.port := 6515; // Linha 5
 IdUDPServer1.Bindings.add.port := 6516; // Linha 6


 //Celular
 IdUDPServer1.Bindings.add.port := 7410; // Celular
 //WhatsApp Vozr
 IdUDPServer1.Bindings.add.port := 7411; // WhatSApp / Telegram / Messenger (VOZ)
 //WhatApp Texto
 IdUDPServer1.Bindings.add.port := 7412; // WhatSApp  Texto


 IdTCPServer1.Bindings.Add.Port := 2020;
 IdTCPServer1.Active := true;




 // Ativa o leitor da porta
  IdUDPServer1.Active:=TRUE;

 //Executa o PlugIn com seu nº de registro no primeiro parametro
 Registro:='C04467PXXXXXXF-BRP20160506-SB';//(se não for um registro válido, rodará como DEMO)
 S:='C:\PlugInRepeater\PlugInBraiDRepeater.exe';

 //-- Verifica se o PlugIn está rodando -----------------------
 sHnd:=FindWindow(Pchar('TFormBraiDPlugInFSK'),PChar('FormBraiDPlugInFSK'));
 //if(sHnd=0)then
 //   ShellExecute(Handle, nil, PwideChar(S), nil,PwideChar(Registro), SW_SHOWNORMAL); // ShellExecute: Unit ShellAPI;

ComboBox1.ItemIndex := 0;
end;

procedure TForm1.IdTCPClient1Work(ASender: TObject; AWorkMode: TWorkMode;
  AWorkCount: Int64);
begin
//
end;

procedure TForm1.IdTCPServer1Execute(AContext: TIdContext);
var
  CMD,InputString : String;
  str0,str1,str2,st2,str3,str4,str5,str6,str7,str8,str9:string;
  sDevName, sDevIMEI, S,S1, sDDD,sFone,sNome:String;
  i:integer;
  AFileStream:TStream;
  vData:TDateTime;
  HWin1,hBtWnd1 : Thandle;
begin
  try
        with AContext.Connection do begin
           IOHandler.CheckForDataOnSource(350);
           if(not IOHandler.InputBufferIsEmpty)then begin
            S := IOHandler.ReadLn(IndyTextEncoding_UTF8);
            CMD:=TRIM(S);
            end;
        end;
    finally
    end;

  Memo1.Lines.Add(CMD);

  if(Trim(CMD)='') then begin
       AContext.Connection.IOHandler.DiscardAll;
       AContext.Connection.Disconnect;
  end;

end;


procedure TForm1.IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
  const AData: TIdBytes; ABinding: TIdSocketHandle);
var
 S,sL1,sL2,sD,sF:string;
begin


  S:=BytesToString(AData); //Ler
  S:=AnsiReplaceStr(S,'@',''); //Remover "@" (Unit StrUtils)
  S:=AnsiReplaceStr(S,'&',''); //Remover "&" (Unit StrUtils)

  memo1.Lines.Add(S);

 //-----------------------------------------------------------------------------
 sD:='DATA_CODAREA->'; //Procurar DDD
 sF:='DATA_PHONE->';   //Procurar Phone
 sL1:='L1_INDEX_PHONE->';// Procurar linha 1 (aqui recebe, também, o DDD+Fone)
 sL2:='L2_INDEX_PHONE->';// Procurar linha 2 (aqui recebe, também, o DDD+Fone)
 //-----------------------------------------------------------------------------

 // nº  da Linha
 if(POS(sL1,S)>0)then  Edit1.Text:='1'
 else if(POS(sL2,S)>0)then  Edit1.Text:='2';


 //DDD
 if(POS(sD,S)>0) then
   Edit2.Text:=Copy(S,POS(sD,S)+Length(sD),2);

 //Fone
 if(POS(sF,S)>0) then
   Edit3.Text:=Copy(S,POS(sF,S)+Length(sF),30);

 //-- Porta que recebeu os dados (sem nunhuma utilidade...)
 Edit4.Text:= inttostr(ABinding.port);
end;

end.
